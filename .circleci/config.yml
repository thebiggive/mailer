version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.8.0
  aws-ecs: circleci/aws-ecs@1.1.0
  jira: circleci/jira@1.1.3
  slack: circleci/slack@3.4.2

jobs:
  test: # Also lints first
    docker:
      - image: circleci/php:7.4

    steps:
      - checkout

      - run: sudo apt-get install -y libzip-dev zip
      - run: sudo docker-php-ext-install bcmath pdo_mysql zip
      - run: sudo pecl install redis && sudo docker-php-ext-enable redis

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}

      - run: composer install --no-interaction

      - save_cache:
          paths:
            - vendor
          key: composer-v1-{{ checksum "composer.lock" }}

      - run: composer run lint:check

      - run: composer run docs # Ensure OpenAPI annotations remain valid

      - run: composer run test

workflows:
  build:
    jobs:
      - test:
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development
            - slack/notify-on-failure: ~

#  deploy-staging:
#    jobs:
#      - test:
#          filters:
#            branches:
#              only:
#                - develop
#      - aws-ecr/build-and-push-image:
#          requires:
#            - test
#          repo: '${AWS_ECR_REPO_NAME}'
#          region: AWS_REGION
#          tag: 'staging,staging-${CIRCLE_SHA1}'
#      - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build-and-push-image
#          aws-region: '${AWS_REGION}'
#          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
#          cluster-name: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
#          container-image-name-updates: 'container=mailer_web,tag=staging-${CIRCLE_SHA1}'
#          post-steps:
#            - slack/notify-on-failure: ~
#            - jira/notify:
#                job_type: deployment
#                environment_type: staging
#            - slack/notify:
#                color: '#009900'
#                message: 'We use rolling blue/green deploys. All visitors to staging will see the updated app version within ~30 minutes.'
#                title: 'Staging: Mailer deployed!'
#
#  deploy-production:
#    jobs:
#      - test:
#          filters:
#            branches:
#              only:
#                - master
#      - aws-ecr/build-and-push-image:
#          requires:
#            - test
#          repo: '${AWS_ECR_REPO_NAME}'
#          region: AWS_REGION
#          tag: 'production,production-${CIRCLE_SHA1}'
#      - aws-ecs/deploy-service-update:
#          requires:
#            - aws-ecr/build-and-push-image
#          aws-region: '${AWS_REGION}'
#          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
#          cluster-name: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX_WEB}'
#          container-image-name-updates: 'container=mailer_web,tag=production-${CIRCLE_SHA1}'
#          post-steps:
#            - slack/notify-on-failure: ~
#            - jira/notify:
#                job_type: deployment
#                environment_type: production
#            - slack/notify:
#                color: '#009900'
#                message: 'We use rolling blue/green deploys. All visitors to production will see the updated app version within ~30 minutes.'
#                title: 'Production: Mailer deployed!'
